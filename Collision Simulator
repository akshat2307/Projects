
class PriorityQueueBase:
	class _Item:
		__slots__ = '_key' , '_value'
		def __init__ (self, k, v):
			self._key = k
			self._value = v
		def __lt__ (self, other):
			return self._key < other._key 
		def _extract(self):
			return (self._key,self._value)
	def is_empty(self): 
		return len(self) == 0


class HeapPriorityQueue(PriorityQueueBase):

	def _parent(self, j):
		return (j - 1) // 2
	def _left(self, j):
		return 2*j+1
	def _right(self, j):
		return 2*j+2
	def _has_left(self, j):
		return self._left(j) < len(self._data)
	def _has_right(self, j):
		return self._right(j) < len(self._data) 
	def _swap(self, i, j):
		self._data[i], self._data[j] = self._data[j], self._data[i]
	def _upheap(self, j):
		parent = self._parent(j)
		if j > 0 and self._data[j] < self._data[parent]:
			self._swap(j, parent)
			self._upheap(parent)
	def _downheap(self, j):
		if self._has_left(j):
			left = self._left(j)
			small_child = left
			if self._has_right(j):
				right = self._right(j)
				if self._data[right] < self._data[left]:
					small_child = right
			if self._data[small_child] < self._data[j]:
				self._swap(j, small_child)
				self._downheap(small_child)

	def __init__ (self):
		self._data = [ ]
	def __len__ (self):
		return len(self._data)
	def add(self, key, value):
		self._data.append(self._Item(key, value))
		self._upheap(len(self._data) - 1)
	def min(self):
		if self.is_empty():
			raise Empty('Priority queue is empty.')
		item = self._data[0]
		return (item._key, item._value)
	def remove_min(self):
		if self.is_empty():
			raise Empty( 'Priority queue is empty. ')
		self._swap(0, len(self._data) - 1)
		item = self._data.pop() 
		self._downheap(0) 
		return (item._key, item._value)
	def printer(self):
		ans=[]
		for i in range (0,len(self._data)):
			ans.append(self._data[i]._extract())
		return ans
	def top(self):
		return self._data[0]._extract()


infinity_float = float('inf')

def vels(m1, v1, m2, v2):
	ans2 = ((2*m1*v1) + (m2-m1)*v2)/(m1+m2)
	ans1 = v2-v1 + ans2
	return [ans1, ans2]

def coldist(v1, x1, v2, x2):
	if(v2>=v1):
		return infinity_float
	else:
		return x1 + v1*((x2-x1)/(v1-v2))


def coltime(d, v1, v2):
	if(v2>=v1):
		return infinity_float
	else:
		return (d/(v1-v2))

def final(x1, v1, t1, x2, v2, t2):    #return xcollision, tcollision
	if(v1==v2):
		return(infinity_float, 0)
	t = (x2-x1 + v1*t1 - v2*t2)/(v1-v2)
	cold = x2 + (t-t2)*v2
	if(t<max(t1, t2)):
		return (infinity_float, 0)
	return(t, cold)
	

def listCollisions(M, x, v, m, T):
	ans = []
	n = len(x)
	xt = []
	for i in range(n):
		xt.append([x[i], 0])
	collisions = []
	for i in range(n):
		collisions.append(0)
	collisions.append(0)
	vel = []
	for i in range(n):
		vel.append(v[i])
	pq = HeapPriorityQueue()
	for i in range(n-1):
		pq.add([coltime((xt[i+1][0]-xt[i][0]), v[i], v[i+1]), i], [i, 0, final(x[i], v[i], 0, x[i+1], v[i+1], 0)[1]])
	prevtime = 0
	ans = []
	while(pq.is_empty()!=True and m>0 and pq.top()[0][0]<=T):
		ele = pq.remove_min()
		time = ele[0][0]
		i = ele[1][0]
		cols = ele[1][1]
		dis = ele[1][2]
		if(cols<collisions[i]+collisions[i+1]):
			continue
		else:

			if(time>T):
				break
			xt[i][0] = dis
			xt[i][1] = time
			xt[i+1][0] = dis
			xt[i+1][1] = time
			ans.append((round(time, 4), i, round(dis, 4)))
			collisions[i]+=1
			collisions[i+1]+=1
			pp = vels(M[i], v[i], M[i+1], v[i+1])
			v[i] = pp[0]
			v[i+1] = pp[1]
			if(i>0):
				coliminus1 = final(xt[i-1][0], v[i-1], xt[i-1][1], xt[i][0], v[i], xt[i][1])
				if(coliminus1[0] > time):
					pq.add([coliminus1[0], i-1], [i-1, collisions[i-1]+collisions[i], coliminus1[1]])
			if(i+1<n-1):
				coliplus1 = final(xt[i+1][0], v[i+1], xt[i+1][1], xt[i+2][0], v[i+2], xt[i+2][1])
				if(coliplus1[0] > time):
					pq.add([coliplus1[0], i+1], [i+1, collisions[i+1]+collisions[i+2], coliplus1[1]])
			m-=1
	return ans


