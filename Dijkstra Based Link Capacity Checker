class PriorityQueueBase:
	class _Item:
		__slots__ = '_key' , '_value'
		def __init__ (self, k, v):
			self._key = k
			self._value = v
		def __lt__ (self, other):
			return self._key < other._key 
		def _extract(self):
			return (self._key,self._value)
	def is_empty(self): 
		return len(self) == 0


class HeapPriorityQueue(PriorityQueueBase):

	def _parent(self, j):
		return (j - 1) // 2
	def _left(self, j):
		return 2*j+1
	def _right(self, j):
		return 2*j+2
	def _has_left(self, j):
		return self._left(j) < len(self._data)
	def _has_right(self, j):
		return self._right(j) < len(self._data) 
	def _swap(self, i, j):
		self._data[i], self._data[j] = self._data[j], self._data[i]
	def _upheap(self, j):
		parent = self._parent(j)
		if j > 0 and self._data[j] < self._data[parent]:
			self._swap(j, parent)
			self._upheap(parent)
	def _downheap(self, j):
		if self._has_left(j):
			left = self._left(j)
			small_child = left
			if self._has_right(j):
				right = self._right(j)
				if self._data[right] < self._data[left]:
					small_child = right
			if self._data[small_child] < self._data[j]:
				self._swap(j, small_child)
				self._downheap(small_child)

	def __init__ (self):
		self._data = [ ]
	def __len__ (self):
		return len(self._data)
	def add(self, key, value):
		self._data.append(self._Item(key, value))
		self._upheap(len(self._data) - 1)
	def min(self):
		if self.is_empty():
			raise Empty('Priority queue is empty.')
		item = self._data[0]
		return (item._key, item._value)
	def remove_min(self):
		if self.is_empty():
			raise Empty( 'Priority queue is empty. ')
		self._swap(0, len(self._data) - 1)
		item = self._data.pop() 
		self._downheap(0) 
		return (item._key, item._value)
	def printer(self):
		ans=[]
		for i in range (0,len(self._data)):
			ans.append(self._data[i]._extract())
		return ans
	def top(self):
		return self._data[0]._extract()

infinity_float = float('inf')

def findMaxCapacity(n, links, s, t):
    adj = []
    prev = []
    maxlink = []
    for i in range(n):
        adj.append([])
        maxlink.append(-1)
        prev.append(-1)

    for tt in links:
        adj[tt[0]].append([tt[1], tt[2]])
        adj[tt[1]].append([tt[0], tt[2]])
    prev[s] = s
    pq = HeapPriorityQueue()
    maxlink[s] = infinity_float
    pq.add(-1 * infinity_float, s)
    while(pq.is_empty() == False):
        link, node = pq.remove_min()
        link = link*-1
        for nl in adj[node]:
            newnode = nl[0]
            newlink = nl[1]
            if(min(link,newlink)>maxlink[newnode]):
                maxlink[newnode] = min(link,newlink)
                pq.add(-1*maxlink[newnode], newnode)
                prev[newnode] = node
    ans = []
    ans.append(t)
    while(prev[ans[-1]] != ans[-1]):
        ans.append(prev[ans[-1]])
    for i in range(0, int(len(ans)/2)):
        ans[i], ans[len(ans)-i-1] = ans[len(ans)-i-1], ans[i]

    return (maxlink[t], ans)
